version: '3.8'

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  prestashop_data:
  mysql_data:
  grafana_data:
  prometheus_data:
  alertmanager_data:
  mysql_backups:

services:
  prestashop:
    image: prestashop/prestashop:8.1-apache
    container_name: prestashop_app
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      DB_SERVER: db
      DB_NAME: prestashop
      DB_USER: prestashop
      DB_PASSWORD: psswrd
      PS_DOMAIN: localhost
      PS_COUNTRY: FR
      PS_LANGUAGE: fr
    volumes:
      - prestashop_data:/var/www/html
    networks:
      - frontend
      - backend
      - monitoring
    depends_on:
      - db

  db:
    image: mysql:5.7
    container_name: prestashop_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: prestashop
      MYSQL_USER: prestashop
      MYSQL_PASSWORD: psswrd
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - backend
      - monitoring
    command: --default-authentication-plugin=mysql_native_password --explicit_defaults_for_timestamp

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: prestashop_phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: root
      PMA_ARBITRARY: 1
    networks:
      - frontend
      - backend
      - monitoring 
    depends_on:
      - db

  nginx:
    image: nginx:1.24-alpine
    container_name: prestashop_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8082:8081"  # CHANGÃ‰: Port externe 8082 au lieu de 8081
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - frontend
      - monitoring    
    depends_on:
      - prestashop
      - phpmyadmin

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.external-url=http://localhost:9091'
      - '--storage.tsdb.retention.time=15d'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring
      - frontend

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8083:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring
    privileged: true
    devices:
      - /dev/kmsg
    command:
      - '--housekeeping_interval=30s'
      - '--max_housekeeping_interval=35s'
      - '--event_storage_event_limit=default=0'
      - '--event_storage_age_limit=default=0'

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--no-collector.netstat'
      - '--no-collector.softnet'
      - '--no-collector.netdev'
      - '--no-collector.sockstat'
      - '--no-collector.netclass'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/.+|rootfs/mnt/wsl/.+)($$|/)'
      - '--collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$$'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring

  mysql-exporter:
    image: prom/mysqld-exporter:v0.15.1
    container_name: mysql_exporter
    restart: unless-stopped
    ports:
      - "9104:9104"
    volumes:
      - ./monitoring/mysql/.my.cnf:/etc/mysql/.my.cnf:ro
    command:
      - --config.my-cnf=/etc/mysql/.my.cnf
    networks:
      - backend
      - monitoring
    depends_on:
      - db

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    networks:
      - monitoring
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'

  backup:
    image: alpine:latest
    container_name: mysql_backup
    restart: unless-stopped
    volumes:
      - mysql_backups:/backups
    environment:
      - MYSQL_HOST=db
      - MYSQL_USER=prestashop
      - MYSQL_PASSWORD=psswrd
      - MYSQL_DATABASE=prestashop
      - MAX_BACKUPS=5
    networks:
      - backend
    depends_on:
      - db
    entrypoint: /bin/sh
    command:
      - -c
      - |
        apk add --no-cache mysql-client bash
        while true; do
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BACKUP_FILE="/backups/${MYSQL_DATABASE}_backup_${TIMESTAMP}.sql.gz"
          echo "Starting backup to $BACKUP_FILE"
          mysqldump -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" "$MYSQL_DATABASE" | gzip > "$BACKUP_FILE"
          echo "Backup done."

          COUNT=$(ls -1 /backups/*.sql.gz 2>/dev/null | wc -l)
          if [ "$COUNT" -gt "$MAX_BACKUPS" ]; then
            FILES_TO_DELETE=$(ls -1t /backups/*.sql.gz | tail -n +$(($MAX_BACKUPS + 1)))
            echo "Removing old backups:"
            echo "$FILES_TO_DELETE"
            rm -f $FILES_TO_DELETE
          fi

          echo "Sleeping for 6 hours..."
          sleep 21600
        done
